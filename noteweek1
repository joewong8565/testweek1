### command line

pwd 顯示路徑
ls  顯示檔案    |   ls -al = 詳細內容  | ls -al > +"檔案名稱" = 輸出詳細資訊到新增檔案
cd  切換資料夾  |   cd .. = 回上一層
man 指令說明    |  man + "指令"
echo 印出      | echo + "想印出的內容"  (類似print) 
>  新增指定內容到新增檔案(覆蓋)
>> 新增指定內容到檔案(新增，不會覆蓋原先資料)

____________________________________________________________________________________________________________

touch 建檔(輸入新檔名)or最後修改時間
rm  刪除   |  rm -r + "檔案"  刪除資料夾所有資料
mkdir  新增資料夾
cd 資料夾中檔案部分名稱按tab會自動輸入完畢
mv 移動檔案到特定資料夾  | mv + "檔案" + "資料夾" 
mv 更改檔案名稱  | mv + "檔案" + "更改檔案名稱" 

cp 複製檔案  | cp + "檔案" + "複製檔案名稱" 
cp 複製資料夾以及所有檔案 | cp -r + "資料夾"  

vim 文字編輯器 | vim = "檔案"  | i =  insert文字  | esc = 跳出  | :q = 跳出 vim模式  | :wq = 存檔+跳出 vim

_____________________________________________________________________________________________________________

cat 觀看檔案內容 | cat + "檔案"
cat可以接著用grep抓取關鍵字(類似ctrl+f)
grep 抓取關鍵字  | grep + "關鍵字" + "檔案"
wget 下載檔案　　| wget + url 
curl 送出request| curl + api　｜ curl -I + api  = 顯示header資訊

|   pipe(將左邊輸出到向右邊使用)
_____________________________________________________________________________________________________________

.. = 上一層 各指令通用




_______________________________________________________________________________
_______________________________________________________________________________

[200~### GIT

GIT BASH(選用執行環境)

GIT : 版本控制
1.需要新版本，開一個資料夾
2.不想加入版本控制:不要加入資料夾
3.避免版本號衝突，使用類似亂數的東西當資料夾名稱
4.知道最新版本:用一個檔案來存

_____________________________________________________________________________________________________________________________

指令
_____________________________________________________________________________________________________________________________

git init |初始化，啟用git|會新增.git資料夾

git status | 看版本控制的狀態

git add    | git add + "檔案名稱"  個別檔案加入版本控制

git add .  | 所有檔案加入版本控制 
╔════════════════════════════════════════╗
 !!!有新增檔案要版本控制一定要執行這個動作!!!          
 ╚════════════════════════════════════════╝
 git rm--cached + "檔案" | 特定檔案去除版本控制

 ---------------------------------------------------
 git commit | 版本更新

 git commit -m + "文字"| 直接留言+版本更新

 git add + git commit ;若一樣維持版本控制，每次都要進行上述動作，可以再做一次新的commit
 ---------------------------------------------------

 git log | 觀看commit 歷史紀錄  || git log --oneline 顯示較簡單的log

 git checkout | git checkout + "commit亂碼"(某次想回復到的commit)

 git checkout master | 回到當前最新版本

 .gitignore | git中省略特定檔案的設定檔(要先用touch建立出來  touch .gitignore)
 接著用vim編輯 寫入要不在版本控制內的檔案

 下次進行add . + commit -m +"文字"  時就會包含上次的.gitignore檔，就會連帶去除不想版本控制的檔案

 git commit -am = 上述指令的簡化，更方便

 git diff | 查看這次和上次的內容差異(commit之前)

 --------------------------------------------------
 git branch
 檔案→commit→branch(階層)
  
  git branch -v | 查看所有版本分支

  git branch -d | 刪除指定分支

  git checkout | 轉換分支(switch概念)

  git merge  | 合併兩個分支

  conflict | 手動解決衝突(會有提示去做刪減、增加)
