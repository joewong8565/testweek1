#Week1
### GIT

GIT BASH(選用執行環境)

GIT : 版本控制
1.需要新版本，開一個資料夾
2.不想加入版本控制:不要加入資料夾
3.避免版本號衝突，使用類似亂數的東西當資料夾名稱
4.知道最新版本:用一個檔案來存

_____________________________________________________________________________________________________________________________

指令
_____________________________________________________________________________________________________________________________

git init |初始化，啟用git|會新增.git資料夾

git status | 看版本控制的狀態

git add    | git add + "檔案名稱"  個別檔案加入版本控制

git add .  | 所有檔案加入版本控制 
╔════════════════════════════════════════╗
 !!!有新增檔案要版本控制一定要執行這個動作!!!          
╚════════════════════════════════════════╝
git rm--cached + "檔案" | 特定檔案去除版本控制

---------------------------------------------------
git commit | 版本更新

git commit -m + "文字"| 直接留言+版本更新

git commit --amend  | 修改commit meassage

git add + git commit ;若一樣維持版本控制，每次都要進行上述動作，可以再做一次新的commit
---------------------------------------------------

git log | 觀看commit 歷史紀錄  || git log --oneline 顯示較簡單的log

git checkout | git checkout + "commit亂碼"(某次想回復到的commit)

git checkout master | 回到當前最新版本

.gitignore | git中省略特定檔案的設定檔(要先用touch建立出來  touch .gitignore)
接著用vim編輯 寫入要不在版本控制內的檔案

下次進行add . + commit -m +"文字"  時就會包含上次的.gitignore檔，就會連帶去除不想版本控制的檔案

git commit -am = 上述指令的簡化，更方便

git diff | 查看這次和上次的內容差異(commit之前)

--------------------------------------------------
git branch
檔案→commit→branch(階層)
 
git branch -v | 查看所有版本分支

git branch -d | 刪除指定分支

git checkout | 轉換分支(switch概念)

git merge  | 合併兩個分支

conflict | 手動解決衝突(會有提示去做刪減、增加)

git push | 將本地檔案傳到遠端

git pull | 將遠端檔案同步至本地

git clone | 複製遠端的 Repository 檔案到本地端



